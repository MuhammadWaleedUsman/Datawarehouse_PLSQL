
--Making the relations between fact sales and all other dimension tables

AlTER TABLE FACT_SALES ADD CONSTRAINT
FK_CUSTOMER_ID FOREIGN KEY (CUSTOMERKEY) REFERENCES DIM_CUSTOMER(CUSTOMER_ID);

AlTER TABLE FACT_SALES ADD CONSTRAINT
FK_SUPPLIER_ID FOREIGN KEY (SUPPLIERKEY) REFERENCES DIM_SUPPLIER(SUPPLIER_ID);

AlTER TABLE FACT_SALES ADD CONSTRAINT
FK_STORE_ID FOREIGN KEY (STOREKEY) REFERENCES DIM_STORE(STORE_ID);

AlTER TABLE FACT_SALES ADD CONSTRAINT
FK_PRODUCT_ID FOREIGN KEY (PRODUCTKEY) REFERENCES DIM_PRODUCT(PRODUCT_ID);

AlTER TABLE FACT_SALES ADD CONSTRAINT
FK_DATE FOREIGN KEY (TRANSACTION_DATE) REFERENCES DIM_DATE(DATE_ID);


--DW analysis


--Q1 Which product produced highest sales in the whole year?

SELECT * from (SELECT SUM(TOTALSALE),PRODUCTKEY
FROM FACT_SALES
GROUP BY PRODUCTKEY 
Order by SUM(TOTALSALE) DESC)
WHERE ROWNUM = 1;
	

--Q2 Determine the top 3 supplier names in Aug 2016 in terms of total sales

SELECT * FROM (Select SUPPLIER_NAME,SUPPLIER_ID FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_SUPPLIER SUPPLIER on FACT.SUPPLIERKEY = SUPPLIER.SUPPLIER_ID
WHERE DATE1.MONTH LIKE '08' and DATE1.YEAR = '2016'
GROUP by SUPPLIER_NAME,SUPPLIER_ID 
ORDER BY sum(TOTALSALE) DESC)
WHERE ROWNUM <= 3;
	

--Q3 Determine the top 3 store names in Aug 2016 in terms of total sales.

SELECT * FROM (Select STORE_NAME,STORE_ID FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_STORE STORE on FACT.STOREKEY = STORE.STORE_ID
WHERE DATE1.YEAR LIKE '2016' and DATE1.MONTH = '08'
GROUP BY STORE_ID,STORE_NAME 
ORDER BY SUM(TOTALSALE) DESC)
WHERE ROWNUM <= 3;


--Q4 How many sales transactions were there for the product that generated maximum sales revenue in 2016? Also present the product quantity sold.

SELECT COUNT(ID) AS TRANSACT_SALES, SUM(QUANTITY) AS QUANTITY FROM 
FACT_SALES WHERE PRODUCTKEY IN (
SELECT * FROM ( SELECT PRODUCTKEY FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_PRODUCT PRODUCT on FACT.PRODUCTKEY = PRODUCT.PRODUCT_ID
WHERE DATE1.YEAR = '2016'
GROUP BY PRODUCTKEY,PRODUCT_NAME 
ORDER BY SUM(TOTALSALE) DESC)
WHERE ROWNUM = 1);


--Q5 Present the quarterly sales analysis for all products using drill down query concepts, resulting in a report that looks like:
--QUARTER 1
SELECT * FROM (Select PRODUCT_NAME,SUM(TOTALSALE) AS Q1_2016 FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_PRODUCT PRODUCT on FACT.PRODUCTKEY = PRODUCT.PRODUCT_ID
WHERE DATE1.MONTH BETWEEN '01' AND '03' 
GROUP BY PRODUCT_NAME);

--QUARTER 2
SELECT * FROM (Select PRODUCT_NAME,SUM(TOTALSALE) AS Q2_2016 FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_PRODUCT PRODUCT on FACT.PRODUCTKEY = PRODUCT.PRODUCT_ID
WHERE DATE1.MONTH BETWEEN '04' AND '06' 
GROUP BY PRODUCT_NAME);

--QUARTER 3
SELECT * FROM (Select PRODUCT_NAME,SUM(TOTALSALE) AS Q3_2016 FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_PRODUCT PRODUCT on FACT.PRODUCTKEY = PRODUCT.PRODUCT_ID
WHERE DATE1.MONTH BETWEEN '07' AND '09' 
GROUP BY PRODUCT_NAME);

--QUARTER 4
SELECT * FROM (Select PRODUCT_NAME,SUM(TOTALSALE) AS Q4_2016 FROM FACT_SALES FACT
JOIN DIM_DATE DATE1 on FACT.TRANSACTION_DATE = DATE1.DATE_ID
JOIN DIM_PRODUCT PRODUCT on FACT.PRODUCTKEY = PRODUCT.PRODUCT_ID
WHERE DATE1.MONTH BETWEEN '10' AND '12' 
GROUP BY PRODUCT_NAME);



--Q6 Create a materialised view with name “STOREANALYSIS_MV” that presents the product wise sales analysis for each store.

CREATE VIEW STOREANALYSIS_MV AS
SELECT STOREKEY,PRODUCTKEY, SUM(TOTALSALE) AS SALES
FROM FACT_SALES
GROUP BY STOREKEY,PRODUCTKEY;



